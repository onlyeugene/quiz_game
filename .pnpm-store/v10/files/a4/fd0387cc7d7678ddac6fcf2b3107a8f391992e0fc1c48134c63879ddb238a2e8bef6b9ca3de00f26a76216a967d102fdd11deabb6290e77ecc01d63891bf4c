{"version":3,"sources":["../src/type.ts","../src/shared/constants.ts","../src/shared/svg-wrapper.tsx","../src/loader/rotating-lines.tsx"],"names":["DEFAULT_COLOR","DEFAULT_WAI_ARIA_ATTRIBUTE","SVG_NAMESPACE","SvgWrapper","styled","props","POINTS","spin","keyframes","Svg","Polyline","RotatingLines","height","width","color","strokeWidth","animationDuration","strokeColor","visible","ariaLabel","wrapperStyle","wrapperClass","lines","useCallback","point","React"],"mappings":"kOAAO,IAAMA,CAAAA,CAAgB,SAAA,CAEhBC,CAAAA,CAA6B,CACxC,WAAA,CAAa,IAAA,CACb,IAAA,CAAM,aACR,CAAA,CCLO,IAAMC,CAAAA,CAAgB,4BAAA,CCGtB,IAAMC,CAAAA,CAAaC,kBAAAA,CAAO,GAAA;AAAA,WAAA,EACpBC,CAAAA,EAAUA,CAAAA,CAAM,QAAA,CAAW,MAAA,CAAS,MAAO,CAAA;ACQxD,CAAA,CAAA,IAAMC,CAAAA,CAAS,CAAC,CAAA,CAAG,EAAA,CAAI,GAAI,EAAA,CAAI,GAAA,CAAK,GAAA,CAAK,GAAA,CAAK,IAAK,GAAA,CAAK,GAAA,CAAK,GAAA,CAAK,GAAG,EAE/DC,CAAAA,CAAOC,WAAAA;AAAA;AAAA;AAAA;AAAA,CAAA,CAMPC,EAAML,kBAAAA,CAAO,GAAA;AAAA,aAAA,EACJG,CAAI,CAAA,CAAA,EAAIF,CAAAA,EAAU,MAAA,CAAOA,CAAAA,CAAM,kBAAkB,CAAA,CAAE,QAAA,CAAS,GAAG,CAAA,CAAI,OAAOA,CAAAA,CAAM,kBAAkB,EAAI,CAAA,EAAGA,CAAAA,CAAM,kBAAkB,CAAA,CAAA,CAAI,CAAA;AAAA,CAAA,CAG9IK,EAAWN,kBAAAA,CAAO,QAAA;AAAA,gBAAA,EACNC,CAAAA,EAAS,CAAA,EAAGA,CAAAA,CAAM,YAAY,CAAA,EAAA,CAAI,CAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,CAAA,CAgDvCM,CAAAA,CAA0C,CAAC,CACtD,MAAA,CAAAC,CAAAA,CAAS,GACT,KAAA,CAAAC,CAAAA,CAAQ,EAAA,CACR,KAAA,CAAAC,CAAAA,CAAQd,CAAAA,CACR,YAAAe,CAAAA,CAAc,CAAA,CACd,iBAAA,CAAAC,CAAAA,CAAoB,GAAA,CACpB,WAAA,CAAAC,EACA,OAAA,CAAAC,CAAAA,CAAU,IAAA,CACV,SAAA,CAAAC,CAAAA,CAAY,wBAAA,CACZ,aAAAC,CAAAA,CACA,YAAA,CAAAC,CACF,CAAA,GAAiC,CAC/B,IAAMC,EAAQC,aAAAA,CACZ,IACEjB,CAAAA,CAAO,GAAA,CAAIkB,CAAAA,EAETC,kBAAAA,CAAA,cAACf,CAAAA,CAAA,CACC,GAAA,CAAKc,CAAAA,CACL,MAAA,CAAO,YAAA,CACP,YAAA,CAAcT,CAAAA,CACd,SAAA,CAAW,CAAA,OAAA,EAAUS,CAAK,CAAA,SAAA,CAAA,CAC5B,CACD,CAAA,CACH,CAACT,CAAW,CACd,CAAA,CAEA,OAAKG,CAAAA,CAGHO,kBAAAA,CAAA,cAACtB,CAAAA,CAAA,CACC,KAAA,CAAOiB,CAAAA,CACP,QAAA,CAAUF,CAAAA,CACV,UAAWG,CAAAA,CACX,YAAA,CAAYF,CAAAA,CACZ,aAAA,CAAY,wBAAA,CACX,GAAGlB,GAEJwB,kBAAAA,CAAA,aAAA,CAAChB,CAAAA,CAAA,CACC,KAAA,CAAOP,CAAAA,CACP,QAAQ,WAAA,CACR,KAAA,CAAOW,CAAAA,CACP,MAAA,CAAQD,CAAAA,CACR,MAAA,CAAQK,GAAA,IAAA,CAAAA,CAAAA,CAAeH,CAAAA,CACvB,kBAAA,CAAoBE,CAAAA,CACpB,KAAA,CAAO,OAAOA,CAAiB,CAAA,CAC/B,YAAA,CAAYG,CAAAA,CACZ,aAAA,CAAY,oBAAA,CACX,GAAGlB,CAAAA,CAAAA,CAEHqB,CAAAA,EACH,CACF,CAAA,CAzBmB,IA2BvB","file":"rotating-lines.cjs","sourcesContent":["export const DEFAULT_COLOR = '#4fa94d'\n\nexport const DEFAULT_WAI_ARIA_ATTRIBUTE = {\n  'aria-busy': true,\n  role: 'progressbar',\n}\n\nexport type Style = {\n  [key: string]: string\n}\n\nexport interface PrimaryProps {\n  height?: string | number\n  width?: string | number\n  ariaLabel?: string\n  wrapperStyle?: Style\n  wrapperClass?: string\n  visible?: boolean\n}\n\nexport interface BaseProps extends PrimaryProps {\n  color?: string\n  /**\n   * Provide multiple colors to render a gradient instead of a solid color.\n   * When 2 or more colors are supplied a gradient <defs> will be injected and\n   * the primary color reference (fill or stroke) becomes url(#gradientId).\n   */\n  colors?: string[]\n  /** Type of gradient (linear or radial). Defaults to linear. */\n  gradientType?: 'linear' | 'radial'\n  /** Angle (in degrees) applied via rotate() transform for linear gradients. */\n  gradientAngle?: number\n}\n","export const SVG_NAMESPACE = 'http://www.w3.org/2000/svg'\n","import styled from 'styled-components'\n\n// eslint-disable-next-line tree-shaking/no-side-effects-in-initialization\nexport const SvgWrapper = styled.div<{ $visible: boolean }>`\n  display: ${props => (props.$visible ? 'flex' : 'none')};\n`\n","import React, { useCallback, FunctionComponent } from 'react'\nimport styled, { keyframes } from 'styled-components'\nimport { BaseProps, DEFAULT_COLOR, DEFAULT_WAI_ARIA_ATTRIBUTE } from '../type'\nimport { SVG_NAMESPACE } from '../shared/constants'\nimport { SvgWrapper } from '../shared/svg-wrapper'\n\ninterface Props extends BaseProps {\n  strokeWidth?: string | number\n  animationDuration?: string | number\n  strokeColor?: string\n}\n\nconst POINTS = [0, 30, 60, 90, 120, 150, 180, 210, 240, 270, 300, 330]\n\nconst spin = keyframes`\nto {\n   transform: rotate(360deg);\n }\n`\n\nconst Svg = styled.svg<{ $animationDuration: string | number }>`\n  animation: ${spin} ${props => (String(props.$animationDuration).endsWith('s') ? String(props.$animationDuration) : `${props.$animationDuration}s`)} steps(12, end) infinite;\n`\n\nconst Polyline = styled.polyline<{ $strokeWidth: string | number }>`\n  stroke-width: ${props => `${props.$strokeWidth}px`};\n  stroke-linecap: round;\n\n  &:nth-child(12n + 0) {\n    stroke-opacity: 0.08;\n  }\n\n  &:nth-child(12n + 1) {\n    stroke-opacity: 0.17;\n  }\n\n  &:nth-child(12n + 2) {\n    stroke-opacity: 0.25;\n  }\n\n  &:nth-child(12n + 3) {\n    stroke-opacity: 0.33;\n  }\n\n  &:nth-child(12n + 4) {\n    stroke-opacity: 0.42;\n  }\n\n  &:nth-child(12n + 5) {\n    stroke-opacity: 0.5;\n  }\n\n  &:nth-child(12n + 6) {\n    stroke-opacity: 0.58;\n  }\n\n  &:nth-child(12n + 7) {\n    stroke-opacity: 0.66;\n  }\n\n  &:nth-child(12n + 8) {\n    stroke-opacity: 0.75;\n  }\n\n  &:nth-child(12n + 9) {\n    stroke-opacity: 0.83;\n  }\n\n  &:nth-child(12n + 11) {\n    stroke-opacity: 0.92;\n  }\n`\n\nexport const RotatingLines: FunctionComponent<Props> = ({\n  height = 96,\n  width = 96,\n  color = DEFAULT_COLOR,\n  strokeWidth = 5,\n  animationDuration = 0.75,\n  strokeColor,\n  visible = true,\n  ariaLabel = 'rotating-lines-loading',\n  wrapperStyle,\n  wrapperClass,\n}): React.ReactElement | null => {\n  const lines = useCallback(\n    () =>\n      POINTS.map(point => (\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        <Polyline\n          key={point}\n          points=\"24,12 24,4\"\n          $strokeWidth={strokeWidth}\n          transform={`rotate(${point}, 24, 24)`}\n        />\n      )),\n    [strokeWidth]\n  )\n\n  if (!visible) return null\n\n  return (\n    <SvgWrapper\n      style={wrapperStyle}\n      $visible={visible}\n      className={wrapperClass}\n      aria-label={ariaLabel}\n      data-testid=\"rotating-lines-loading\"\n      {...DEFAULT_WAI_ARIA_ATTRIBUTE}\n    >\n      <Svg\n        xmlns={SVG_NAMESPACE}\n        viewBox=\"0 0 48 48\"\n        width={width}\n        height={height}\n        stroke={strokeColor ?? color}\n        $animationDuration={animationDuration}\n        speed={String(animationDuration)}\n        aria-label={ariaLabel}\n        data-testid=\"rotating-lines-svg\"\n        {...DEFAULT_WAI_ARIA_ATTRIBUTE}\n      >\n        {lines()}\n      </Svg>\n    </SvgWrapper>\n  )\n}\n"]}