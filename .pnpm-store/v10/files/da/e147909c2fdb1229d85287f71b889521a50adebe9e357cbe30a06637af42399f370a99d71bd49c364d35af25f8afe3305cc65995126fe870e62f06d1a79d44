{"version":3,"sources":["../src/type.ts","../src/shared/svg-wrapper.tsx","../src/loader/oval.tsx"],"names":["DEFAULT_COLOR","DEFAULT_WAI_ARIA_ATTRIBUTE","SvgWrapper","styled","props","RADIUS","getPath","radius","getViewBoxSize","strokeWidth","secondaryStrokeWidth","maxStrokeWidth","startingPoint","endpoint","Oval","height","width","color","secondaryColor","ariaLabel","wrapperStyle","wrapperClass","visible","strokeWidthSecondary","animationDuration","React"],"mappings":"kOAAO,IAAMA,CAAAA,CAAgB,SAAA,CAEhBC,EAA6B,CACxC,WAAA,CAAa,IAAA,CACb,IAAA,CAAM,aACR,CAAA,CCFO,IAAMC,EAAaC,kBAAAA,CAAO,GAAA;AAAA,WAAA,EACpBC,CAAAA,EAAUA,CAAAA,CAAM,QAAA,CAAW,MAAA,CAAS,MAAO,CAAA;ACYxD,CAAA,CAAA,IAAMC,EAAS,EAAA,CAQTC,CAAAA,CAAWC,GACR,CAAC,GAAA,CAAMA,EAAS,gBAAA,CAAkBA,CAAAA,CAAQA,EAAQA,CAAM,CAAA,CAAE,KAAK,GAAG,CAAA,CASrEC,EAAiB,CACrBC,CAAAA,CACAC,EACAH,CAAAA,GACW,CACX,IAAMI,CAAAA,CAAiB,IAAA,CAAK,IAAIF,CAAAA,CAAaC,CAAoB,EAC3DE,CAAAA,CAAgB,CAACL,EAASI,CAAAA,CAAiB,CAAA,CAAI,EAC/CE,CAAAA,CAAWN,CAAAA,CAAS,EAAII,CAAAA,CAC9B,OAAO,CAACC,CAAAA,CAAeA,CAAAA,CAAeC,EAAUA,CAAQ,CAAA,CAAE,KAAK,GAAG,CACpE,EAEaC,CAAAA,CAAqC,CAAC,CACjD,MAAA,CAAAC,CAAAA,CAAS,GACT,KAAA,CAAAC,CAAAA,CAAQ,GACR,KAAA,CAAAC,CAAAA,CAAQjB,EACR,cAAA,CAAAkB,CAAAA,CAAiBlB,EACjB,SAAA,CAAAmB,CAAAA,CAAY,eACZ,YAAA,CAAAC,CAAAA,CACA,aAAAC,CAAAA,CACA,OAAA,CAAAC,EAAU,IAAA,CACV,WAAA,CAAAb,EAAc,CAAA,CACd,oBAAA,CAAAc,EACA,iBAAA,CAAAC,CAAAA,CAAoB,CACtB,CAAA,GACEC,kBAAAA,CAAA,cAACvB,CAAAA,CAAA,CACC,MAAOkB,CAAAA,CACP,QAAA,CAAUE,EACV,SAAA,CAAWD,CAAAA,CACX,aAAA,CAAY,cAAA,CACZ,aAAYF,CAAAA,CACX,GAAGlB,GAEJwB,kBAAAA,CAAA,aAAA,CAAC,OACC,KAAA,CAAOT,CAAAA,CACP,OAAQD,CAAAA,CACR,OAAA,CAASP,EACP,MAAA,CAAOC,CAAW,EAClB,MAAA,CAAOc,CAAAA,EAAwBd,CAAW,CAAA,CAC1CJ,CACF,EACA,KAAA,CAAM,4BAAA,CACN,OAAQY,CAAAA,CACR,aAAA,CAAY,YAEZQ,kBAAAA,CAAA,aAAA,CAAC,KAAE,IAAA,CAAK,MAAA,CAAO,SAAS,SAAA,CAAA,CACtBA,kBAAAA,CAAA,cAAC,GAAA,CAAA,CACC,SAAA,CAAU,iBACV,WAAA,CAAa,MAAA,CAAOF,GAAwBd,CAAW,CAAA,CACvD,cAAY,sBAAA,CAAA,CAEZgB,kBAAAA,CAAA,cAAC,QAAA,CAAA,CACC,aAAA,CAAc,KACd,EAAA,CAAG,GAAA,CACH,GAAG,GAAA,CACH,CAAA,CAAGpB,EACH,MAAA,CAAQa,CAAAA,CACR,YAAaT,CAAAA,CACf,CAAA,CACAgB,mBAAA,aAAA,CAAC,MAAA,CAAA,CAAK,EAAGnB,CAAAA,CAAQD,CAAM,GACrBoB,kBAAAA,CAAA,aAAA,CAAC,oBACC,aAAA,CAAc,WAAA,CACd,KAAK,QAAA,CACL,IAAA,CAAK,QACL,EAAA,CAAG,SAAA,CACH,IAAK,CAAA,EAAGD,CAAiB,IACzB,WAAA,CAAY,YAAA,CACd,CACF,CACF,CACF,CACF,CACF","file":"oval.cjs","sourcesContent":["export const DEFAULT_COLOR = '#4fa94d'\n\nexport const DEFAULT_WAI_ARIA_ATTRIBUTE = {\n  'aria-busy': true,\n  role: 'progressbar',\n}\n\nexport type Style = {\n  [key: string]: string\n}\n\nexport interface PrimaryProps {\n  height?: string | number\n  width?: string | number\n  ariaLabel?: string\n  wrapperStyle?: Style\n  wrapperClass?: string\n  visible?: boolean\n}\n\nexport interface BaseProps extends PrimaryProps {\n  color?: string\n  /**\n   * Provide multiple colors to render a gradient instead of a solid color.\n   * When 2 or more colors are supplied a gradient <defs> will be injected and\n   * the primary color reference (fill or stroke) becomes url(#gradientId).\n   */\n  colors?: string[]\n  /** Type of gradient (linear or radial). Defaults to linear. */\n  gradientType?: 'linear' | 'radial'\n  /** Angle (in degrees) applied via rotate() transform for linear gradients. */\n  gradientAngle?: number\n}\n","import styled from 'styled-components'\n\n// eslint-disable-next-line tree-shaking/no-side-effects-in-initialization\nexport const SvgWrapper = styled.div<{ $visible: boolean }>`\n  display: ${props => (props.$visible ? 'flex' : 'none')};\n`\n","import React, { FunctionComponent, ReactElement } from 'react'\nimport { BaseProps, DEFAULT_COLOR, DEFAULT_WAI_ARIA_ATTRIBUTE } from '../type'\nimport { SvgWrapper } from '../shared/svg-wrapper'\n\ninterface OvalProps extends BaseProps {\n  strokeWidth?: string | number\n  strokeWidthSecondary?: string | number\n  secondaryColor?: string\n  animationDuration?: string | number\n}\n\n/**\n * The radius of the circle\n * The Loader size is set with the width and height of the SVG\n * @type {number}\n */\nconst RADIUS = 20\n\n/**\n * Compute Path depending on circle radius\n * The structure with radius 20 is \"M20 0c0-9.94-8.06-20-20-20\"\n * @param radius of the circle radius default 20\n * @returns {string}\n */\nconst getPath = (radius: number): string => {\n  return ['M' + radius + ' 0c0-9.94-8.06', radius, radius, radius].join('-')\n}\n/**\n * Compute the size of the view box depending on the radius and Stroke-Width\n * @param strokeWidth Stroke-Width of the full circle\n * @param secondaryStrokeWidth Stroke-Width of the 1/4 circle\n * @param radius radius of the circle\n * @returns {string}\n */\nconst getViewBoxSize = (\n  strokeWidth: number,\n  secondaryStrokeWidth: number,\n  radius: number\n): string => {\n  const maxStrokeWidth = Math.max(strokeWidth, secondaryStrokeWidth)\n  const startingPoint = -radius - maxStrokeWidth / 2 + 1\n  const endpoint = radius * 2 + maxStrokeWidth\n  return [startingPoint, startingPoint, endpoint, endpoint].join(' ')\n}\n\nexport const Oval: FunctionComponent<OvalProps> = ({\n  height = 80,\n  width = 80,\n  color = DEFAULT_COLOR,\n  secondaryColor = DEFAULT_COLOR,\n  ariaLabel = 'oval-loading',\n  wrapperStyle,\n  wrapperClass,\n  visible = true,\n  strokeWidth = 2,\n  strokeWidthSecondary,\n  animationDuration = 1,\n}): ReactElement => (\n  <SvgWrapper\n    style={wrapperStyle}\n    $visible={visible}\n    className={wrapperClass}\n    data-testid=\"oval-loading\"\n    aria-label={ariaLabel}\n    {...DEFAULT_WAI_ARIA_ATTRIBUTE}\n  >\n    <svg\n      width={width}\n      height={height}\n      viewBox={getViewBoxSize(\n        Number(strokeWidth),\n        Number(strokeWidthSecondary || strokeWidth),\n        RADIUS\n      )}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      stroke={color}\n      data-testid=\"oval-svg\"\n    >\n      <g fill=\"none\" fillRule=\"evenodd\">\n        <g\n          transform=\"translate(1 1)\"\n          strokeWidth={Number(strokeWidthSecondary || strokeWidth)}\n          data-testid=\"oval-secondary-group\"\n        >\n          <circle\n            strokeOpacity=\".5\"\n            cx=\"0\"\n            cy=\"0\"\n            r={RADIUS}\n            stroke={secondaryColor}\n            strokeWidth={strokeWidth}\n          />\n          <path d={getPath(RADIUS)}>\n            <animateTransform\n              attributeName=\"transform\"\n              type=\"rotate\"\n              from=\"0 0 0\"\n              to=\"360 0 0\"\n              dur={`${animationDuration}s`}\n              repeatCount=\"indefinite\"\n            />\n          </path>\n        </g>\n      </g>\n    </svg>\n  </SvgWrapper>\n)\n"]}