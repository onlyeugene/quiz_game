import React, { Component } from 'react';
import type { FocusEvent, KeyboardEvent, MouseEvent } from 'react';
import PropTypes from 'prop-types';
import type { Data, EventHandler, LabelProp, StyleObject } from '../commonTypes';
export declare type Props = Omit<typeof ReactMinimalPieChart.defaultProps, 'label'> & {
    animate?: boolean;
    animationDuration?: number;
    animationEasing?: string;
    background?: string;
    className?: string;
    cx?: number;
    cy?: number;
    data: Data;
    lengthAngle?: number;
    lineWidth?: number;
    injectSvg?: () => React.ReactElement | void;
    label?: LabelProp;
    labelPosition?: number;
    labelStyle?: StyleObject;
    onBlur?: EventHandler<FocusEvent>;
    onClick?: EventHandler<MouseEvent>;
    onFocus?: EventHandler<FocusEvent>;
    onKeyDown?: EventHandler<KeyboardEvent>;
    onMouseOut?: EventHandler<MouseEvent>;
    onMouseOver?: EventHandler<MouseEvent>;
    paddingAngle?: number;
    radius?: number;
    reveal?: number;
    rounded?: boolean;
    segmentsShift?: number | ((data: Data, dataIndex: number) => number | undefined);
    segmentsStyle?: StyleObject;
    segmentsTabIndex?: number;
    startAngle?: number;
    style?: StyleObject;
    totalValue?: number;
    viewBoxSize?: [number, number];
};
export default class ReactMinimalPieChart extends Component<Props> {
    static displayName: string;
    static defaultProps: {
        animate: boolean;
        animationDuration: number;
        animationEasing: string;
        cx: number;
        cy: number;
        label: boolean;
        labelPosition: number;
        lengthAngle: number;
        lineWidth: number;
        paddingAngle: number;
        radius: number;
        rounded: boolean;
        startAngle: number;
        viewBoxSize: number[];
    };
    static propTypes: {
        animate: PropTypes.Requireable<boolean>;
        animationDuration: PropTypes.Requireable<number>;
        animationEasing: PropTypes.Requireable<string>;
        background: PropTypes.Requireable<string>;
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        className: PropTypes.Requireable<string>;
        cx: PropTypes.Requireable<number>;
        cy: PropTypes.Requireable<number>;
        data: PropTypes.Requireable<(PropTypes.InferProps<{
            title: PropTypes.Requireable<string | number>;
            value: PropTypes.Validator<number>;
            color: PropTypes.Requireable<string>;
            key: PropTypes.Requireable<string | number>;
            style: PropTypes.Requireable<{
                [x: string]: string | number | null | undefined;
            }>;
        }> | null | undefined)[]>;
        injectSvg: PropTypes.Requireable<(...args: any[]) => any>;
        label: PropTypes.Requireable<boolean | PropTypes.ReactElementLike | ((...args: any[]) => any)>;
        labelPosition: PropTypes.Requireable<number>;
        labelStyle: PropTypes.Requireable<{
            [x: string]: string | number | null | undefined;
        }>;
        lengthAngle: PropTypes.Requireable<number>;
        lineWidth: PropTypes.Requireable<number>;
        onBlur: PropTypes.Requireable<(...args: any[]) => any>;
        onClick: PropTypes.Requireable<(...args: any[]) => any>;
        onFocus: PropTypes.Requireable<(...args: any[]) => any>;
        onKeyDown: PropTypes.Requireable<(...args: any[]) => any>;
        onMouseOut: PropTypes.Requireable<(...args: any[]) => any>;
        onMouseOver: PropTypes.Requireable<(...args: any[]) => any>;
        paddingAngle: PropTypes.Requireable<number>;
        radius: PropTypes.Requireable<number>;
        reveal: PropTypes.Requireable<number>;
        rounded: PropTypes.Requireable<boolean>;
        segmentsShift: PropTypes.Requireable<number | ((...args: any[]) => any)>;
        segmentsStyle: PropTypes.Requireable<{
            [x: string]: string | number | null | undefined;
        }>;
        segmentsTabIndex: PropTypes.Requireable<number>;
        startAngle: PropTypes.Requireable<number>;
        style: PropTypes.Requireable<{
            [x: string]: string | number | null | undefined;
        }>;
        totalValue: PropTypes.Requireable<number>;
        viewBoxSize: PropTypes.Requireable<(number | null | undefined)[]>;
    };
    revealOverride?: null | number;
    animationTimerId?: null | number;
    animationRAFId?: null | number;
    constructor(props: Props);
    componentDidMount(): void;
    componentWillUnmount(): void;
    startAnimation(): void;
    render(): JSX.Element | null;
}
