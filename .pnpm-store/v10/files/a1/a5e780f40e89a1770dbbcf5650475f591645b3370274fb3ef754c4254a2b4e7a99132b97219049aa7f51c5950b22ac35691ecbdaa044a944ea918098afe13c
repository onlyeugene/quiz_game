{"version":3,"sources":["../src/type.ts","../src/shared/svg-wrapper.tsx","../src/shared/constants.ts","../src/loader/triangle.tsx"],"names":["DEFAULT_COLOR","DEFAULT_WAI_ARIA_ATTRIBUTE","SvgWrapper","styled","props","SVG_NAMESPACE","VIEW_BOX_VALUES","POLYGON_POINTS","dash","keyframes","Polygon","SVG","Triangle","height","width","color","ariaLabel","wrapperStyle","wrapperClass","visible","React"],"mappings":"kOAAO,IAAMA,CAAAA,CAAgB,SAAA,CAEhBC,CAAAA,CAA6B,CACxC,WAAA,CAAa,IAAA,CACb,KAAM,aACR,CAAA,CCFO,IAAMC,CAAAA,CAAaC,kBAAAA,CAAO,GAAA;AAAA,WAAA,EACpBC,CAAAA,EAAUA,CAAAA,CAAM,QAAA,CAAW,MAAA,CAAS,MAAO,CAAA;ACJjD,CAAA,CAAA,IAAMC,EAAgB,4BAAA,CCQ7B,IAAMC,EAAkB,aAAA,CAClBC,CAAAA,CAAiB,kBAGjBC,CAAAA,CAAOC,WAAAA;AAAA;AAAA;AAAA;AAAA,CAAA,CAKPC,EAAUP,kBAAAA,CAAO,OAAA;AAAA;AAAA,aAAA,EAERK,CAAI,CAAA;AAAA,CAAA,CAEbG,EAAMR,kBAAAA,CAAO,GAAA;AAAA;AAAA,CAAA,CAKNS,CAAAA,CAA6C,CAAC,CACzD,MAAA,CAAAC,EAAS,EAAA,CACT,KAAA,CAAAC,CAAAA,CAAQ,EAAA,CACR,KAAA,CAAAC,CAAAA,CAAQf,CAAAA,CACR,SAAA,CAAAgB,EAAY,kBAAA,CACZ,YAAA,CAAAC,CAAAA,CACA,YAAA,CAAAC,CAAAA,CACA,OAAA,CAAAC,CAAAA,CAAU,IACZ,IAEIC,kBAAAA,CAAA,aAAA,CAAClB,CAAAA,CAAA,CACC,MAAOe,CAAAA,CACP,QAAA,CAAUE,CAAAA,CACV,SAAA,CAAW,GAAGD,CAAY,CAAA,CAAA,CAC1B,aAAA,CAAY,kBAAA,CACZ,YAAA,CAAYF,CAAAA,CACX,GAAGf,CAAAA,CAAAA,CAEJmB,mBAAA,aAAA,CAACT,CAAAA,CAAA,CACC,EAAA,CAAG,UAAA,CACH,KAAA,CAAOG,CAAAA,CACP,MAAA,CAAQD,EACR,KAAA,CAAOR,CAAAA,CACP,OAAA,CAASC,CAAAA,CACT,aAAA,CAAY,cAAA,CAAA,CAEZc,kBAAAA,CAAA,aAAA,CAACV,EAAA,CACC,IAAA,CAAK,aAAA,CACL,MAAA,CAAQK,EACR,WAAA,CAAY,GAAA,CACZ,MAAA,CAAQR,CAAAA,CACV,CACF,CACF","file":"triangle.cjs","sourcesContent":["export const DEFAULT_COLOR = '#4fa94d'\n\nexport const DEFAULT_WAI_ARIA_ATTRIBUTE = {\n  'aria-busy': true,\n  role: 'progressbar',\n}\n\nexport type Style = {\n  [key: string]: string\n}\n\nexport interface PrimaryProps {\n  height?: string | number\n  width?: string | number\n  ariaLabel?: string\n  wrapperStyle?: Style\n  wrapperClass?: string\n  visible?: boolean\n}\n\nexport interface BaseProps extends PrimaryProps {\n  color?: string\n  /**\n   * Provide multiple colors to render a gradient instead of a solid color.\n   * When 2 or more colors are supplied a gradient <defs> will be injected and\n   * the primary color reference (fill or stroke) becomes url(#gradientId).\n   */\n  colors?: string[]\n  /** Type of gradient (linear or radial). Defaults to linear. */\n  gradientType?: 'linear' | 'radial'\n  /** Angle (in degrees) applied via rotate() transform for linear gradients. */\n  gradientAngle?: number\n}\n","import styled from 'styled-components'\n\n// eslint-disable-next-line tree-shaking/no-side-effects-in-initialization\nexport const SvgWrapper = styled.div<{ $visible: boolean }>`\n  display: ${props => (props.$visible ? 'flex' : 'none')};\n`\n","export const SVG_NAMESPACE = 'http://www.w3.org/2000/svg'\n","import React, { FunctionComponent } from 'react'\nimport styled, { keyframes } from 'styled-components'\nimport { BaseProps, DEFAULT_COLOR, DEFAULT_WAI_ARIA_ATTRIBUTE } from '../type'\nimport { SvgWrapper } from '../shared/svg-wrapper'\nimport { SVG_NAMESPACE } from '../shared/constants'\n\ntype TriangleProps = BaseProps\n\nconst VIEW_BOX_VALUES = '-3 -4 39 39'\nconst POLYGON_POINTS = '16,0 32,32 0,32'\n\n/** Styles */\nconst dash = keyframes`\nto {\n   stroke-dashoffset: 136;\n }\n`\nconst Polygon = styled.polygon`\n  stroke-dasharray: 17;\n  animation: ${dash} 2.5s cubic-bezier(0.35, 0.04, 0.63, 0.95) infinite;\n`\nconst SVG = styled.svg`\n  transform-origin: 50% 65%;\n`\n/** Styles Ends */\n\nexport const Triangle: FunctionComponent<TriangleProps> = ({\n  height = 80,\n  width = 80,\n  color = DEFAULT_COLOR,\n  ariaLabel = 'triangle-loading',\n  wrapperStyle,\n  wrapperClass,\n  visible = true,\n}: TriangleProps): React.ReactElement => {\n  return (\n    <SvgWrapper\n      style={wrapperStyle}\n      $visible={visible}\n      className={`${wrapperClass}`}\n      data-testid=\"triangle-loading\"\n      aria-label={ariaLabel}\n      {...DEFAULT_WAI_ARIA_ATTRIBUTE}\n    >\n      <SVG\n        id=\"triangle\"\n        width={width}\n        height={height}\n        xmlns={SVG_NAMESPACE}\n        viewBox={VIEW_BOX_VALUES}\n        data-testid=\"triangle-svg\"\n      >\n        <Polygon\n          fill=\"transparent\"\n          stroke={color}\n          strokeWidth=\"1\"\n          points={POLYGON_POINTS}\n        />\n      </SVG>\n    </SvgWrapper>\n  )\n}\n"]}